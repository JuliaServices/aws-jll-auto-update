name: Auto update AWS LibAwsX packages

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  update-aws-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        library: [["LibAwsCommon.jl","aws_c_common","aws_c_common_jll.jl"],["LibAwsCal.jl","aws_c_cal","aws_c_cal_jll.jl"],["LibAwsCompression.jl","aws_c_compression","aws_c_compression_jll.jl"],["LibAwsSdkutils.jl","aws_c_sdkutils","aws_c_sdkutils_jll.jl"],["LibAwsChecksums.jl","aws_checksums","aws_checksums_jll.jl"]]
    steps:
    - uses: julia-actions/setup-julia@v2
      with:
        version: "1"
    - uses: julia-actions/cache@v2
    - name: Checkout BinaryWrapper repository
      uses: actions/checkout@v4
      with:
        repository: JuliaBinaryWrappers/${{ matrix.library[2] }}
        path: jll
        branch: main
        token: ${{ secrets.PAT }}

    - name: Checkout LibAwsX repository
      uses: actions/checkout@v4
      with:
        repository: JuliaServices/${{ matrix.library[0] }}
        branch: main
        path: libawsx
        token: ${{ secrets.PAT }}

    - name: Parse current version in jll Project.toml
      run: |
        # Extract JLL version from jll/Project.toml (e.g., "0.9.3+3")
        RAW_JLL_VERSION=$(grep -oP -m 1 '(?<=version = ")[^"]+' jll/Project.toml)
        # Remove build number (e.g., "0.9.3+3" → "0.9.3")
        JLL_VERSION=$(echo "$RAW_JLL_VERSION" | sed 's/+[0-9]*//')
        echo "RAW_JLL_VERSION=${RAW_JLL_VERSION}"
        echo "Sanitized JLL_VERSION=${JLL_VERSION}"
        echo "JLL_VERSION=${JLL_VERSION}" >> $GITHUB_ENV

    - name: Parse JLL version in LibAwsX/Project.toml
      run: |
        # Parse the JLL version in the [compat] section in Project.toml
        LIBRARY=${{ matrix.library[1] }}
        JLL_NAME="${LIBRARY}_jll"
        # Extract only the [compat] section
        COMPAT_SECTION=$(awk '/^\[compat\]/ {flag=1; next} /^\[/{flag=0} flag' libawsx/Project.toml)
        # Parse the version constraint, ensuring we ignore the deps section
        PROJECT_VERSION=$(echo "$COMPAT_SECTION" | grep -oP "(?<=${JLL_NAME} = \")[^\"]+" | sed 's/^=//')
        echo "JLL_NAME=${JLL_NAME}" >> $GITHUB_ENV
        echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
        echo "PROJECT_VERSION=${PROJECT_VERSION}"

    - name: Ensure Fork Exists
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        REPO="LibAwsCommon.jl"
        USER="quinnj2"
        ORG="JuliaServices"

        # Check if the fork exists
        if ! gh repo view "$USER/$REPO" --json name --jq .name 2>/dev/null; then
          echo "Fork does not exist. Creating fork..."
          gh repo fork "$ORG/$REPO" --clone=false --remote=false
          echo "Waiting for fork creation..."
          sleep 10
        else
          echo "Fork already exists."
        fi

    - name: Check for need to update, re-generate bindings, PR
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
          LIBRARY=${{ matrix.library[1] }}
          BRANCH_NAME="update-${JLL_NAME}-${JLL_VERSION}"
          # Compare versions
          if [[ "$JLL_VERSION" != "$PROJECT_VERSION" ]]; then
            echo "New version found for $JLL_NAME: $JLL_VERSION"
            # Check if branch already exists in remote
            # if git ls-remote --exit-code --heads https://github.com/quinnj2/${{ matrix.library[0] }}.git $BRANCH_NAME; then
            #   echo "Branch $BRANCH_NAME already exists in remote. Skipping PR creation."
            #   exit 0
            # fi

            # Update Project.toml jll compat version number
            sed -i "s/${JLL_NAME} = \"=$PROJECT_VERSION\"/${JLL_NAME} = \"=$JLL_VERSION\"/" libawsx/Project.toml
            # Update gen/Project.toml jll compat version number (this kicks off the generate bindings action when we make the PR)
            sed -i "s/${JLL_NAME} = \"=$PROJECT_VERSION\"/${JLL_NAME} = \"=$JLL_VERSION\"/" libawsx/gen/Project.toml
            # Update Project.toml version number
            # Extract current package version from libawsx/Project.toml
            CURRENT_LIBAWSX_VERSION=$(grep -oP -m 1 '(?<=version = ")[^"]+' libawsx/Project.toml)
            echo "Current LibAwsX Version: $CURRENT_LIBAWSX_VERSION"
            # Increment the patch version (1.2.0 → 1.2.1)
            PATCH=$(echo $CURRENT_LIBAWSX_VERSION | awk -F. '{print $3+1}')
            NEW_LIBAWSX_VERSION=$(echo $CURRENT_LIBAWSX_VERSION | awk -F. '{print $1"."$2"."'"$PATCH"'}')
            echo "New LibAwsX Version: $NEW_LIBAWSX_VERSION"
            sed -i "s/version = \"$CURRENT_LIBAWSX_VERSION\"/version = \"$NEW_LIBAWSX_VERSION\"/" libawsx/Project.toml

            # Commit and push changes
            cd libawsx
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git checkout -b $BRANCH_NAME
            git add .
            git commit -m "Update ${JLL_NAME} jll dependency to version ${JLL_VERSION}"
            git push --force https://github.com/quinnj2/${{ matrix.library[0] }} $BRANCH_NAME
            echo "MAKE_PR=true" >> $GITHUB_ENV
          else
            echo "No new version found for $JLL_NAME. Exiting."
            exit 0
          fi

    - name: Checkout fork
      uses: actions/checkout@v4
      if: env.MAKE_PR == 'true'
      with:
        ref: update-${{ env.JLL_NAME }}-${{ env.JLL_VERSION }}
        repository: quinnj2/${{ matrix.library[0] }}
        token: ${{ secrets.PAT }}

    - name: Create a PR
      if: env.MAKE_PR == 'true'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        gh pr create --title "Update ${{ env.JLL_NAME }} to version ${{ env.JLL_VERSION }}" \
              --body "This PR updates ${{ env.JLL_NAME }} to version ${{ env.JLL_VERSION }}. cc: @quinnj, @Octogonapus" \
              --repo JuliaServices/${{ matrix.library[0] }} --base main
