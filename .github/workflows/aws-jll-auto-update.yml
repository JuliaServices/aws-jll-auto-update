name: Sync and Update AWS Libraries

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:

jobs:
  update-jll-cache:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout aws-jll-auto-update repository
      uses: actions/checkout@v4
      with:
        repository: JuliaServices/aws-jll-auto-update
        token: ${{ secrets.PAT }}
        ref: main

    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'

    - name: Update JLL versions cache
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        julia jll-version-manager.jl update-cache

    - name: Commit and push changes if any
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        
        if git diff --exit-code jll-versions.json; then
          echo "No changes to JLL versions cache"
        else
          git add jll-versions.json
          git commit -m "Update JLL versions cache"
          git push
          echo "Updated JLL versions cache"
        fi

  update-library:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        library: ["aws_c_auth","aws_c_cal","aws_c_common","aws_c_compression","aws_c_event_stream","aws_c_http","aws_c_http_jq","aws_c_io","aws_c_iot","aws_c_mqtt","aws_c_s3","aws_c_sdkutils","aws_checksums","aws_lc","s2n_tls"]

    steps:
    - name: Checkout JuliaPackaging/Yggdrasil repository
      uses: actions/checkout@v4
      with:
        ref: master
        repository: JuliaPackaging/Yggdrasil
        token: ${{ secrets.PAT }}

    - name: compute full repo name
      run: |
        LIBRARY=${{ matrix.library }}
        if [[ "$LIBRARY" == "aws_c_http_jq" ]]; then
          REPO="quinnj/aws-c-http"
        elif [[ "$LIBRARY" == "s2n_tls" ]]; then
          REPO="aws/s2n-tls"
        else
          REPO="awslabs/$(echo "$LIBRARY" | tr '_' '-')"
        fi
        echo "REPO=$REPO" >> $GITHUB_ENV

    - name: Check latest release version
      run: |
        LIBRARY=${{ matrix.library }}
         # Get the tags
        RELEASES=$(curl --retry 5 -L -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/repos/${{ env.REPO }}/git/refs/tags)
        echo "RELEASES=$RELEASES"
        # Parse and sort the versions to get the highest version
        LATEST_VERSION=$(echo $RELEASES | jq -r '.[] | select(.ref | test("refs/tags/v")) | .ref' | sed 's/refs\/tags\/v//' | sort -V | tail -n 1)
        LATEST_SHA=$(echo $RELEASES | jq -r --arg LATEST_VERSION "refs/tags/v$LATEST_VERSION" '.[] | select(.ref == $LATEST_VERSION) | .object.sha')
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "LATEST_SHA=$LATEST_SHA" >> $GITHUB_ENV
        echo "LATEST_VERSION=$LATEST_VERSION, LATEST_SHA=$LATEST_SHA"

    - name: Parse current version and sha in build_tarballs.jl
      run: |
        LIBRARY=${{ matrix.library }}
        LIBRARY_DIR=$(echo "${LIBRARY:0:1}" | tr '[:lower:]' '[:upper:]')/${LIBRARY}
        CURRENT_VERSION=$(grep -oP -m 1 '(?<=version = v")[^"]+' $LIBRARY_DIR/build_tarballs.jl | sed 's/^v//')
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        echo "CURRENT_VERSION=${CURRENT_VERSION}"
        REPO=${{ env.REPO }}
        CURRENT_SHA=$(grep -oP -m 1 '(?<=GitSource\("https://github.com/'${REPO//\//\\/}'.git", ")[a-f0-9]{40}' $LIBRARY_DIR/build_tarballs.jl)
        echo "CURRENT_SHA=${CURRENT_SHA}" >> $GITHUB_ENV
        echo "CURRENT_SHA=${CURRENT_SHA}"

    - name: Setup Julia
      if: env.LATEST_VERSION != env.CURRENT_VERSION
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'

    - name: Download JLL version manager
      if: env.LATEST_VERSION != env.CURRENT_VERSION
      run: |
        curl -L -o jll-version-manager.jl https://raw.githubusercontent.com/JuliaServices/aws-jll-auto-update/main/jll-version-manager.jl
        curl -L -o jll-versions.json https://raw.githubusercontent.com/JuliaServices/aws-jll-auto-update/main/jll-versions.json

    - name: Compare versions and update if necessary
      if: env.LATEST_VERSION != env.CURRENT_VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        LIBRARY=${{ matrix.library }}
        LIBRARY_DIR=$(echo "${LIBRARY:0:1}" | tr '[:lower:]' '[:upper:]')/${LIBRARY}
        BRANCH_NAME="update-versions-$LIBRARY-${LATEST_VERSION}"

        # Check if the branch already exists in quinnj2/Yggdrasil
        if git ls-remote --exit-code --heads https://github.com/quinnj2/Yggdrasil.git $BRANCH_NAME; then
          echo "Branch $BRANCH_NAME already exists. Skipping push."
          echo "SKIP_PUSH=true" >> $GITHUB_ENV
          exit 0
        fi

        # Update the library version and SHA
        sed -i "s/version = v\"${CURRENT_VERSION}\"/version = v\"${LATEST_VERSION}\"/" $LIBRARY_DIR/build_tarballs.jl
        sed -i "s#${CURRENT_SHA}#${LATEST_SHA}#" $LIBRARY_DIR/build_tarballs.jl

        # Update dependencies in this library's build_tarballs.jl to use latest versions
        echo "Updating dependencies for $LIBRARY to latest versions..."
        julia jll-version-manager.jl update-deps $LIBRARY_DIR/build_tarballs.jl

        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git checkout -b $BRANCH_NAME
        git add .
        git commit -m "[$LIBRARY] Update to ${LATEST_VERSION} with latest dependency versions"
        git push https://github.com/quinnj2/Yggdrasil $BRANCH_NAME

    - name: Checkout fork
      uses: actions/checkout@v4
      if: env.LATEST_VERSION != env.CURRENT_VERSION && env.SKIP_PUSH != 'true'
      with:
        ref: update-versions-${{ matrix.library }}-${{ env.LATEST_VERSION }}
        repository: quinnj2/Yggdrasil
        token: ${{ secrets.PAT }}

    - name: Create a PR
      if: env.LATEST_VERSION != env.CURRENT_VERSION && env.SKIP_PUSH != 'true'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        gh pr create --title "[${{ matrix.library }}] Update to version ${LATEST_VERSION}" \
          --body "This PR updates ${{ matrix.library }} to version ${LATEST_VERSION}. cc: @quinnj @Octogonapus" \
          --repo JuliaPackaging/Yggdrasil --base master
